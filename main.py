from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium import webdriver
from selenium.common.exceptions import NoSuchElementException
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.options import Options
import bs4
import time
import random
import pandas as pd
import json
import os
from dotenv import load_dotenv
load_dotenv()


URL = os.getenv('URL')

options = webdriver.ChromeOptions()
options.add_argument('--disable-tensorflow')  # ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô TensorFlow
options.add_argument('--disable-software-rasterizer')  # ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Å‡∏£‡∏≤‡∏ü‡∏ü‡∏¥‡∏Å
options.add_experimental_option("detach", True)
options.add_experimental_option("excludeSwitches", ['enable-automation'])
driver = webdriver.Chrome(options=options)

driver.get(URL)

time.sleep(1)
driver.execute_script("document.body.style.zoom='70%'")



def generate_random_answer():
    answers = [
        "‡πÑ‡∏´‡∏°‡πÑ‡∏ó‡∏¢ ‡∏´‡∏±‡∏ß‡πÉ‡∏à‡∏™‡∏¥‡∏ô",
        "‡∏°‡∏ô‡πÅ‡∏Ñ‡∏ô‡∏ï‡πå ‡πÅ‡∏Å‡πà‡∏ô‡∏Ñ‡∏π‡∏ì",
        "‡∏•‡∏≥‡πÑ‡∏¢ ‡πÑ‡∏´",
        "‡∏ï‡∏¥‡πä‡∏Å ‡∏ä‡∏µ‡πÇ‡∏£‡πà"
    ]
    return random.choice(answers)


try:
    # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö
    data = driver.page_source
    soup = bs4.BeautifulSoup(data, "html.parser")
    list_items = soup.select(
        '#mG61Hd > div.RH5hzf.RLS9Fe > div.lrKTG > div.o3Dpx > div')

    # ‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡∏ú‡πà‡∏≤‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞ item
    for index, item in enumerate(list_items, 1):
        # 1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏±‡∏ö Radio options (‡∏ä‡πâ‡∏≠‡∏¢‡∏Ç‡πâ‡∏≠‡∏™‡∏≠‡∏ö)
        radio_options = driver.find_elements(By.CSS_SELECTOR,
                                             f"#mG61Hd > div.RH5hzf.RLS9Fe > div.lrKTG > div.o3Dpx > div:nth-child({index}) div[role='radio']")

        if radio_options:
            # ‡∏™‡∏∏‡πà‡∏°‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å (‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏£‡∏Å‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å")
            valid_options = radio_options[1:] if len(
                radio_options) > 1 else radio_options
            if valid_options:
                random_option = random.choice(valid_options)
                option_text = random_option.text.strip()
                driver.execute_script("arguments[0].scrollIntoView();", random_option)
                driver.execute_script("arguments[0].click();", random_option)
                print(f"‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡πâ‡∏≠‡∏¢‡∏Ç‡πâ‡∏≠‡∏™‡∏≠‡∏ö: {option_text}")
                time.sleep(0.5)
                continue

        # 2. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Text input
        text_inputs = driver.find_elements(By.CSS_SELECTOR,
                                        f"#mG61Hd > div.RH5hzf.RLS9Fe > div.lrKTG > div.o3Dpx > div:nth-child({index}) input[type='text']")
        if text_inputs:
            answer = generate_random_answer()
            text_inputs[0].send_keys(answer)
            print(f"‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°: {answer}")
            continue

        # 3. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Dropdown
        dropdown = driver.find_elements(By.CSS_SELECTOR, 
            ".MocG8c.HZ3kWc.mhLiyf.LMgvRb.KKjvXb.DEh1R")

        if dropdown:
            # ‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô dropdown ‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤‡πÉ‡∏ô viewport
            driver.execute_script("arguments[0].scrollIntoView({block: 'center'});", dropdown[0])
            time.sleep(0.5)  # ‡πÉ‡∏´‡πâ‡πÄ‡∏ß‡∏•‡∏≤ UI ‡πÇ‡∏´‡∏•‡∏î

            print(f"Dropdown‡∏°‡∏µ: {len(dropdown)}‡∏ï‡∏±‡∏ß")

            # ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏£‡∏Å (‡πÄ‡∏•‡∏∑‡∏≠‡∏Å)
            driver.execute_script("arguments[0].scrollIntoView();", dropdown[0])
            driver.execute_script("arguments[0].click();", dropdown[0])
            time.sleep(1)

            # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏∑‡πà‡∏ô‡πÉ‡∏ô dropdown
            options = driver.find_elements(By.CSS_SELECTOR, 
                ".MocG8c.HZ3kWc.mhLiyf.LMgvRb.KKjvXb.DEh1R[aria-selected='false']")

            if options:
                random_option = random.choice(options)
                driver.execute_script("arguments[0].scrollIntoView();", random_option)
                driver.execute_script("arguments[0].click();", random_option)
                print(f"‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏≤‡∏Å dropdown: {random_option.text.strip()}")
                time.sleep(0.5)



        # 4. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Radio ‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏≠‡∏∑‡πà‡∏ô
        other_radio_options = driver.find_elements(By.CSS_SELECTOR,
                                                    f"#mG61Hd > div.RH5hzf.RLS9Fe > div.lrKTG > div.o3Dpx > div:nth-child({index}) div[role='option']")
        if other_radio_options:
            valid_options = [
                opt for opt in other_radio_options if opt.text.strip() != "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å"]
            if valid_options:
                random_option = random.choice(valid_options)
                option_text = random_option.text.strip()
                driver.execute_script("arguments[0].scrollIntoView();",random_option)
                driver.execute_script("arguments[0].click();", random_option)
                print(f"‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å radio: {option_text}")
                time.sleep(0.5)
            continue
    
    time.sleep(1)

    # ‡πÉ‡∏ä‡πâ JavaScript ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏°
    try:
        submit_button = driver.find_element(By.CSS_SELECTOR, "div[aria-label='Submit']")
        driver.execute_script("arguments[0].click();", submit_button)
        print("\n########### ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° '‡∏™‡πà‡∏á' ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ###########\n")
    except NoSuchElementException:
        print("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏õ‡∏∏‡πà‡∏°‡∏™‡πà‡∏á (Submit button) ‡∏ö‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö")
        submit_button = driver.find_elements(By.CSS_SELECTOR, "div[role='button']")
        for idx, btn in enumerate(submit_button):
            print(f'‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏ôButton‡∏ó‡∏µ‡πà {idx} role=button: {btn.text}')

            if "‡∏ñ‡∏±‡∏î‡πÑ‡∏õ" in btn.text.strip():
                driver.execute_script("arguments[0].click();", btn)
                print("\n########### ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° '‡∏ñ‡∏±‡∏î‡πÑ‡∏õ' ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ###########\n")



except Exception as e:
    print(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}")



# ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡πâ‡∏≠‡∏¢‡πÅ‡∏ö‡∏ö‡∏™‡∏∏‡πà‡∏°
try:
    # ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ Radio Group ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    radio_groups = driver.find_elements(By.CSS_SELECTOR, 'div[role="radiogroup"]')

    for idx, group in enumerate(radio_groups):
        print(f"\nüîπ ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà {idx + 1}\n{'-'*30}")

        # ‡∏´‡∏≤ radio options ‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ô‡∏±‡πâ‡∏ô
        radio_options = group.find_elements(By.CSS_SELECTOR, 'div[role="radio"]')

        # ‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å (aria-checked="false")
        unchecked_options = [opt for opt in radio_options if opt.get_attribute("aria-checked") == "false"]

        if unchecked_options:
            # ‡∏™‡∏∏‡πà‡∏°‡πÄ‡∏•‡∏∑‡∏≠‡∏Å 1 ‡∏ï‡∏±‡∏ß‡∏à‡∏≤‡∏Å‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
            random_choice = random.choice(unchecked_options)
            driver.execute_script("arguments[0].scrollIntoView({block: 'center'});", random_choice)
            time.sleep(0.5)  # ‡∏´‡∏ô‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏´‡πâ UI ‡πÇ‡∏´‡∏•‡∏î

            # ‡∏Ñ‡∏•‡∏¥‡∏Å‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
            driver.execute_script("arguments[0].scrollIntoView();", random_choice)
            driver.execute_script("arguments[0].click();", random_choice)
            print(f"‚úÖ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å: {random_choice.get_attribute('aria-label')}")

        else:
            print("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å")

        time.sleep(1)  # ‡∏û‡∏±‡∏Å‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ñ‡∏±‡∏î‡πÑ‡∏õ

except Exception as e:
    print(f"EXCEPT: {e}")

submit_button = driver.find_element(By.CSS_SELECTOR, "div[aria-label='Submit']")
driver.execute_script("arguments[0].click();", submit_button)
print("\n########### ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° '‡∏™‡πà‡∏á' ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ###########\n")

# ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏õ‡∏∏‡πà‡∏° '‡∏î‡∏π‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô' ‡πÇ‡∏´‡∏•‡∏î
WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.CSS_SELECTOR, "div[role='presentation']")))

# ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏õ‡∏∏‡πà‡∏° '‡∏î‡∏π‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô'
view_score = driver.find_elements(By.CSS_SELECTOR, "div[role='presentation']")

for idx, btn in enumerate(view_score):
    text = btn.text.strip()
    print(f'‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏ô Button ‡∏ó‡∏µ‡πà {idx}: {repr(text)}')

    if "‡∏î‡∏π‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô" in text:
        print(f"\nüéØ ‡∏û‡∏ö‡∏õ‡∏∏‡πà‡∏°‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö '‡∏î‡∏π‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô' ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏î...\n")

        # ‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÉ‡∏´‡πâ‡∏õ‡∏∏‡πà‡∏°‡∏≠‡∏¢‡∏π‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏•‡∏≤‡∏á‡∏Å‡πà‡∏≠‡∏ô‡∏Å‡∏î
        driver.execute_script("arguments[0].scrollIntoView({block: 'center'});", btn)

        # ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏õ‡∏∏‡πà‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ñ‡∏•‡∏¥‡∏Å‡πÑ‡∏î‡πâ
        WebDriverWait(driver, 10).until(EC.element_to_be_clickable(btn))

        try:
            btn.click()  # ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°
            print("\n‚úÖ ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° '‡∏î‡∏π‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô' ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (click)\n")
        except Exception as e:
            print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏°: {e}")
            driver.execute_script("arguments[0].click();", btn)  # ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏î‡πâ‡∏ß‡∏¢ JS
            print("\n‚úÖ ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° '‡∏î‡∏π‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô' ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (JS click)\n")

# ‡∏™‡∏•‡∏±‡∏ö‡πÅ‡∏ó‡πá‡∏ö‡πÑ‡∏õ‡πÅ‡∏ó‡πá‡∏ö‡πÉ‡∏´‡∏°‡πà
time.sleep(2)
# ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ window handles ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
tabs = driver.window_handles

# ‡∏™‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÅ‡∏ó‡πá‡∏ö‡πÉ‡∏´‡∏°‡πà (‡πÅ‡∏ó‡πá‡∏ö‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î)
driver.switch_to.window(tabs[-1])

print("‚úÖ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡πÅ‡∏ó‡πá‡∏ö‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")

# ‡∏£‡∏≠‡πÉ‡∏´‡πâ element ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à ‡∏Å‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.CSS_SELECTOR, "label.docssharedWizToggleLabeledContainer.LygNqb.N2RpBe.O4MBef.RDPZE")))

driver.execute_script("document.body.style.zoom='70%'")

# ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
correct_label = driver.find_elements(By.CSS_SELECTOR, "label.docssharedWizToggleLabeledContainer.LygNqb.N2RpBe.O4MBef.RDPZE")
# ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
correct_answers = []

print(f"‡∏û‡∏ö {len(correct_label)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö\n")
i = 1
for idx, label in enumerate(correct_label):
    # ‡πÉ‡∏ä‡πâ xpath ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏≤ div ‡∏•‡∏π‡∏Å‡∏ï‡∏£‡∏á‡πÜ ‡∏Ç‡∏≠‡∏á label
    div_children = label.find_elements(By.XPATH, "./div")
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÉ‡∏ô div ‡∏•‡∏π‡∏Å‡∏ï‡∏£‡∏á‡πÜ ‡∏°‡∏µ aria-label="‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á"
    invalid_div = label.find_elements(By.XPATH, ".//div[@aria-label='‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á']")
    
    # ‡∏Ç‡πâ‡∏≤‡∏°‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà‡∏û‡∏ö div ‡∏ó‡∏µ‡πà‡∏°‡∏µ aria-label="‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á"
    if invalid_div:
        # print(f"‡∏Ç‡πâ‡∏≠‡∏ó‡∏µ‡πà {idx+1} ‡∏Ç‡πâ‡∏≤‡∏° ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏°‡∏µ div ‡∏ó‡∏µ‡πà‡∏°‡∏µ aria-label='‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á'")
        continue

    correct_answers.append({
        "question": i,
        "anwser": label.text
    })

    print(f"\033[1;32m‡∏Ç‡πâ‡∏≠‡∏ó‡∏µ‡πà {i} ‡∏ï‡∏≠‡∏ö:\033[0m {label.text}")  # ‡πÉ‡∏ä‡πâ‡∏™‡∏µ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
    
    i+=1
    print('-' * 50)  # ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏™‡πâ‡∏ô‡πÅ‡∏ö‡πà‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏≠‡πà‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢‡∏Ç‡∏∂‡πâ‡∏ô


# ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏•‡∏á‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå JSON
try:
    with open("correct_answers.json", "w", encoding="utf-8") as json_file:
        json.dump(correct_answers, json_file, ensure_ascii=False, indent=4)
        print("\n‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏™‡πç‡∏≤‡πÄ‡∏£‡πá‡∏à!\n")
except Exception as e:
    print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: {e}")

# ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö
time.sleep(3)
driver.quit()